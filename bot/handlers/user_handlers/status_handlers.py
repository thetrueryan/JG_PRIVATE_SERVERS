from aiogram.types import Message, FSInputFile
from aiogram import F, Router
from aiogram.fsm.context import FSMContext

from bot.keyboards.user_keyboard.keyboard_captions import captions
from bot.keyboards.user_keyboard.status_keyboard import status_menu, continue_menu
from bot.keyboards.user_keyboard.back_keyboard import back_button
from bot.keyboards.user_keyboard.buy_vpn_keyboard import select_period_menu, select_payment_menu, inline_payment_menu
from datetime import datetime
from db.repositories.core import AsyncCore
from bot.states import VPNOrder
from payment.crypto_invoice import get_crypto_invoice
from payment.calculate import calculate_extend_order_price, calculate_duration
from payment.check_invoice_status import check_invoice_status_loop
from scripts.admin import send_order_info_to_admin

router = Router()

@router.message(F.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å")
async def cmd_status_menu(message: Message, state: FSMContext):
    await state.update_data(prev="main_menu")
    if message.from_user:
        tg_id = message.from_user.id
        result = await AsyncCore.get_orders_by_tg_id(tg_id)
        await message.answer("<b>–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>")
        if result:
            orders_id_list = []
            message_text = []
            for user in result:
                    for order in user.paid_orders:
                        orders_id_list.append(order.id)
                        
                        current_date = datetime.utcnow()
                        days_to_expire = (order.expires_at - current_date).days
                        current_date.strftime("%d.%m.%Y")
                        exires_date = order.expires_at.strftime("%d.%m.%Y")
                        paid_date = order.paid_at.strftime("%d.%m.%Y")
                        message_text.append(f"–¶–µ–Ω–∞: {order.price} –†—É–±.\n–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {paid_date}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {exires_date}\n–î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {days_to_expire}")
            order_number = 1
            for order in message_text:
                await message.answer(f"<u>‚úÖ–ó–∞–∫–∞–∑ #{order_number}:</u>\n{order}")
                order_number += 1
            await message.answer(text="‚ùóÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–∞–≤ –æ–ø–ª–∞—Ç–∏—Ç—å‚ùóÔ∏è",reply_markup=status_menu())
        else:
            await message.answer("‚ùóÔ∏è–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞‚ùóÔ∏è")
    await state.update_data(orders_ids=orders_id_list)
    await state.set_state(VPNOrder.status)

@router.message(VPNOrder.status, F.text != "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def cmd_select_order_to_pay(message: Message, state: FSMContext):
    await state.update_data(prev=VPNOrder.status)
    if message.from_user:
        tg_id = message.from_user.id
        result = await AsyncCore.get_orders_by_tg_id(tg_id)
        if result:
            orders_id_list = []
            for user in result:
                for order in user.paid_orders:
                    orders_id_list.append(order.id)
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 1)", reply_markup=back_button())
            await state.set_state(VPNOrder.select_order)

@router.message(VPNOrder.select_order, F.text != "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def cmd_select_order_number_in_status_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    orders = data.get("orders_ids")

    if not orders:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if not message.text:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_input = message.text.strip()
     
    if not user_input.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1).")
        return   
    
    index = int(user_input) - 1
    if index < 0 or index >= len(orders):
        await message.answer("‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order_id = orders[index]
    await state.update_data(selected_order_id=order_id)
    await message.answer(f"–ó–∞–∫–∞–∑ #{user_input} –≤—ã–±—Ä–∞–Ω.\n–ù–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–¥–ª–∂–∏—Ç—å</b> –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞", reply_markup=continue_menu())
    await state.update_data(order_number=user_input)
    await state.set_state(VPNOrder.check_select_order)

@router.message(VPNOrder.check_select_order, F.text != "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def cmd_select_extend_period(message: Message, state: FSMContext):
    await state.update_data(prev=VPNOrder.select_order)
    await message.answer(text=captions["vpn_select_period"], reply_markup=select_period_menu())
    await state.set_state(VPNOrder.extend_period)

@router.message(VPNOrder.extend_period, F.text != "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def cmd_select_extend_payment(message: Message, state: FSMContext):
    await state.update_data(period=message.text)
    await state.update_data(prev=VPNOrder.extend_period)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã", reply_markup=select_payment_menu())
    await state.set_state(VPNOrder.extend_payment)

@router.message(VPNOrder.extend_payment, F.text != "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def cmd_crypto_invoice(message: Message, state: FSMContext):
    await state.update_data(extend_payment=message.text)
    await state.update_data(prev=VPNOrder.extend_payment)
    if message.from_user:
        telegram_id = message.from_user.id
        data = await state.get_data()
        order_id = data.get("selected_order_id")
        order_number = data.get("order_number")
        if isinstance(order_id, int):
            order = await AsyncCore.get_order_by_id(order_id)
            if order:
                old_price = order.price
                old_months = order.duration_months
                new_price = await calculate_extend_order_price(old_price, old_months, data)
                new_months = await calculate_duration(data)
                if new_price:
                    invoice = await get_crypto_invoice(new_price)
                    if invoice:
                        invoice_id = invoice.invoice_id
                        order_id = order.id
                        payment_url = invoice.bot_invoice_url
                        await state.set_state(VPNOrder.extend_waiting_payment)
                        await message.answer(text=f"–ó–∞–∫–∞–∑ # {order_number}: –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã")
                        await message.answer(text=f"–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {new_price:.2f} —Ä—É–±.")
                        await message.answer("üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ (–ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É):", reply_markup=inline_payment_menu(payment_url, invoice_id))
                        await message.answer("‚ùóÔ∏è<b>–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç </b>‚ùóÔ∏è", reply_markup=back_button())
                        success_status = await check_invoice_status_loop(invoice)
                        if success_status == "paid":
                            await AsyncCore.updaid_expired_order(order_id, new_price, invoice_id, "paid", True, new_months)
                            await message.answer(text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ê—Ä–µ–Ω–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {new_months} –º–µ—Å—è—Ü–∞!\n–î–ª—è —Å–≤—è–∑–∏: @ttryan")
                            await send_order_info_to_admin(
                                f"<u>–ó–∞–∫–∞–∑ # {order_id} –ü—Ä–æ–¥–ª–µ–Ω</u>: –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {new_price}, —Å—Ä–æ–∫: {new_months}\n",
                                f"invoice_id: {invoice_id}\ntelegram_user_id: {telegram_id}\n",
                                )
                        else:      
                            await message.answer(text="‚ùå –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")